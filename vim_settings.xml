<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks>
      <mark key="S" line="33" column="20" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Valuation/CashFlowGenerationInput.cs" />
    </globalmarks>
    <filemarks>
      <file name="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Valuation/CashFlowGenerationInput.cs" timestamp="1511913522924">
        <mark key="'" line="69" column="45" />
        <mark key="[" line="33" column="45" />
        <mark key="]" line="33" column="46" />
        <mark key="." line="33" column="46" />
      </file>
      <file name="$USER_HOME$/Documents/s/EPL/ra.database.fsp/RA.Database.Migrator.FSP/M20170519113726_CreateInitialLoanSchema.cs" timestamp="1511893372103">
        <mark key="'" line="17" column="36" />
      </file>
      <file name="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.ConsoleApp/Program.cs" timestamp="1510174923324" />
      <file name="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" timestamp="1510176272620">
        <mark key="'" line="105" column="8" />
        <mark key="[" line="20" column="0" />
        <mark key="]" line="20" column="0" />
        <mark key="^" line="115" column="34" />
        <mark key="." line="20" column="0" />
      </file>
      <file name="$USER_HOME$/Documents/s/dream/ra.services.dream/RA.Domain.Dto.Dream/Models/SecuritizationModel.cs" timestamp="1510181438563">
        <mark key="'" line="35" column="0" />
        <mark key="[" line="0" column="13" />
        <mark key="]" line="1" column="0" />
        <mark key="." line="1" column="0" />
        <mark key="^" line="1" column="0" />
      </file>
      <file name="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Containers/CashFlows/ContractualCashFlow.cs" timestamp="1511919659044" />
      <file name="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Common/Utilities/MathUtility.cs" timestamp="1511995517256">
        <mark key="'" line="20" column="12" />
        <mark key="[" line="15" column="4" />
        <mark key="]" line="15" column="3" />
        <mark key="^" line="15" column="3" />
        <mark key="." line="15" column="3" />
      </file>
      <file name="/code_fragment.cls" timestamp="1509729221876">
        <mark key="[" line="0" column="0" />
        <mark key="." line="2" column="5" />
      </file>
      <file name="$USER_HOME$/Documents/s/RR/ra.redistributables.audit/RA.Infrastructure.Audit/Storage/S3AuditStore.cs" timestamp="1512066264238">
        <mark key="'" line="31" column="56" />
        <mark key="[" line="107" column="20" />
        <mark key="]" line="107" column="26" />
        <mark key="." line="107" column="26" />
        <mark key="^" line="107" column="26" />
      </file>
      <file name="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Domain.FSP.Services/CustomerInquiryService.cs" timestamp="1510175823991">
        <mark key="'" line="114" column="0" />
        <mark key="[" line="73" column="153" />
        <mark key="]" line="74" column="86" />
        <mark key="." line="74" column="86" />
        <mark key="^" line="74" column="86" />
      </file>
      <file name="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/LoanStages/FixedRateAmortizingLoanStage.cs" timestamp="1511995445355" />
      <file name="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.cs" timestamp="1511904397677">
        <mark key="[" line="9" column="53" />
        <mark key="]" line="9" column="51" />
        <mark key="." line="9" column="51" />
        <mark key="^" line="9" column="51" />
      </file>
      <file name="$USER_HOME$/Downloads/HTTP_REQUEST_2017-11-01T21-56-19.775Z.json" timestamp="1509573419836">
        <mark key="'" line="0" column="71" />
      </file>
      <file name="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/ProductTypes/FixedRateLoan.cs" timestamp="1511995751254" />
      <file name="$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/0A2FD96E-4F70-4831-A0A6-0E37669D611F/76/0e021fd2/String.cs" timestamp="1509661210541">
        <mark key="'" line="141" column="27" />
      </file>
      <file name="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.IO/Database/SQL/SecuritizationEngineContext/1_SubsequentRelease/1_Tables/ReserveAccountsDetail.Table.sql" timestamp="1510178101045" />
      <file name="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/SecuritizationEngine/Securitization.cs" timestamp="1511908010930">
        <mark key="'" line="222" column="13" />
        <mark key="[" line="221" column="12" />
        <mark key="." line="221" column="13" />
      </file>
      <file name="$USER_HOME$/Documents/s/RR/ra.redistributables.audit/RA.Infrastructure.Audit/AuditMiddleware.cs" timestamp="1509742630762">
        <mark key="'" line="46" column="60" />
      </file>
      <file name="$USER_HOME$/Documents/s/EPL/fsp.web.admin/src/resources/services/loan-service.ts" timestamp="1509058552761">
        <mark key="'" line="72" column="5" />
      </file>
      <file name="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/Controllers/CustomerInquiryController.cs" timestamp="1510176217194">
        <mark key="'" line="52" column="8" />
        <mark key="[" line="93" column="111" />
        <mark key="]" line="93" column="127" />
        <mark key="^" line="93" column="127" />
        <mark key="." line="93" column="127" />
      </file>
      <file name="$USER_HOME$/Documents/s/OUPL/ra.api.operations2/RA.API.Operations2/Controllers/DocumentManagementController.cs" timestamp="1509739624056">
        <mark key="'" line="83" column="16" />
      </file>
      <file name="$USER_HOME$/Documents/s/OUPL/ra.api.operations2/RA.Domain.Services/Loans/ConfirmTerms/ConfirmTerms.json" timestamp="1512032165442">
        <mark key="[" line="5" column="0" />
        <mark key="]" line="5" column="55" />
        <mark key="." line="0" column="808" />
        <mark key="^" line="0" column="808" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/consoles/db/4dd35349-d64c-43d5-972a-39bb450e0372/console_1.sql" timestamp="1511905482580">
        <mark key="'" line="6" column="7" />
        <mark key="[" line="4" column="6" />
        <mark key="]" line="4" column="7" />
        <mark key="^" line="4" column="7" />
        <mark key="." line="4" column="7" />
      </file>
      <file name="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Containers/CashFlows/ProjectedCashFlow.cs" timestamp="1511913021234">
        <mark key="'" line="119" column="52" />
      </file>
      <file name="$USER_HOME$/Documents/s/EPL/fsp.web.admin/src/routes/apply-payment-detail/apply-payment-detail.ts" timestamp="1509060810102">
        <mark key="'" line="1" column="0" />
      </file>
      <file name="$USER_HOME$/Downloads/HTTP_REQUEST_2017-11-01T23-23-05.802Z.json" timestamp="1509578601180">
        <mark key="'" line="17" column="47" />
      </file>
      <file name="$USER_HOME$/Documents/s/EPL/ra.database.fsp/RA.Database.Migrator.FSP/AddOriginalCAPIFieldToRenovatePaceLoan.cs" timestamp="1511893649992">
        <mark key="'" line="20" column="0" />
        <mark key="[" line="5" column="17" />
        <mark key="]" line="5" column="70" />
        <mark key="." line="5" column="94" />
        <mark key="^" line="14" column="63" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/7237752A-EC9B-4D4A-B3E3-9AE7881979E1/0a/c98963a5/HttpResponse.cs" timestamp="1509570476565">
        <mark key="'" line="81" column="25" />
      </file>
      <file name="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/Startup.cs" timestamp="1511893492560">
        <mark key="'" line="33" column="39" />
        <mark key="[" line="126" column="0" />
        <mark key="]" line="126" column="0" />
        <mark key="." line="126" column="0" />
        <mark key="^" line="98" column="11" />
      </file>
      <file name="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.IntegrationTests/Hero_2017_1_SecuritizationCashFlowTieOut_Final.cs" timestamp="1510183561782" />
      <file name="$USER_HOME$/Documents/s/EPL/ra.database.fsp/RA.Database.Migrator.FSP/M20171128102217_AddOriginalCAPIFieldToRenovatePaceLoan.cs" timestamp="1511894037802" />
      <file name="$USER_HOME$/Documents/s/HPAPL/ra.services.hpa/RA.Services.HPA/Startup.cs" timestamp="1509136928718">
        <mark key="'" line="13" column="0" />
      </file>
      <file name="$USER_HOME$/Downloads/HTTP_REQUEST_2017-11-03T21-27-37.390Z.json" timestamp="1511890981892" />
      <file name="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Domain.FSP.Dto/RenovatePaceLoanDto.cs" timestamp="1511893705280">
        <mark key="'" line="6" column="17" />
        <mark key="[" line="34" column="9" />
        <mark key="]" line="34" column="7" />
        <mark key="." line="34" column="7" />
        <mark key="^" line="34" column="7" />
      </file>
      <file name="/Dummy.txt" timestamp="1511996016972">
        <mark key="[" line="0" column="0" />
        <mark key="." line="0" column="17" />
      </file>
      <file name="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Domain.FSP.Services/Loan/LoanService.cs" timestamp="1511893749477">
        <mark key="'" line="289" column="63" />
      </file>
      <file name="$USER_HOME$/Documents/s/HS/hero/BusinessObjects/RA.BusinessObjects.DP/Payload.cs" timestamp="1509999075169">
        <mark key="'" line="1413" column="9" />
      </file>
      <file name="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/ProjectedCashFlows/ProjectedCashFlowLogic.cs" timestamp="1511914723518">
        <mark key="'" line="124" column="42" />
      </file>
      <file name="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Domain.FSP.Services/IndentureStrategy/MCEDIndentureStrategy.cs" timestamp="1508956575998">
        <mark key="'" line="12" column="44" />
      </file>
      <file name="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" timestamp="1511905248355">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="1" column="0" />
        <mark key="]" line="1" column="0" />
        <mark key="." line="1" column="0" />
      </file>
      <file name="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/ProductTypes/Pace/PaceAssessment.cs" timestamp="1511995711467">
        <mark key="'" line="19" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="22" column="17" filename="$USER_HOME$/Documents/s/HS/hero/BusinessObjects/RA.BusinessObjects.DP/Payload.cs" />
      <jump line="1413" column="9" filename="$USER_HOME$/Documents/s/HS/hero/BusinessObjects/RA.BusinessObjects.DP/Payload.cs" />
      <jump line="24" column="22" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero.dp/RA.Database.Migrator.RAHERO.DP/MigrationExtensions/CreateDPRecordsRAFAPayoffRequest.cs" />
      <jump line="128" column="123" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero.dp/RA.Database.Migrator.RAHERO.DP/MigrationExtensions/CreateDPRecordsRAFAPayoffRequest.cs" />
      <jump line="126" column="0" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero.dp/RA.Database.Migrator.RAHERO.DP/MigrationExtensions/CreateDPRecordsRAFAPayoffRequest.cs" />
      <jump line="26" column="34" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero.dp/RA.Database.Migrator.RAHERO.DP/MigrationExtensions/CreateDPRecordsRAFAPayoffRequest.cs" />
      <jump line="123" column="17" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero.dp/RA.Database.Migrator.RAHERO.DP/MigrationExtensions/CreateDPRecordsRAFAPayoffRequest.cs" />
      <jump line="19" column="14" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero.dp/RA.Database.Migrator.RAHERO.DP/M20171018101948_Insert_Next_Gen_Fin_Estimate_Global.cs" />
      <jump line="26" column="0" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero.dp/RA.Database.Migrator.RAHERO.DP/InsertRecordsForRAFAPayoffStatementTemplate.cs" />
      <jump line="27" column="20" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero.dp/RA.Database.Migrator.RAHERO.DP/InsertRecordsForRAFAPayoffStatementTemplate.cs" />
      <jump line="20" column="21" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero.dp/RA.Database.Migrator.RAHERO.DP/InsertRecordsForRAFAPayoffStatementTemplate.cs" />
      <jump line="24" column="20" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero.dp/RA.Database.Migrator.RAHERO.DP/InsertRecordsForRAFAPayoffStatementTemplate.cs" />
      <jump line="122" column="48" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero.dp/RA.Database.Migrator.RAHERO.DP/MigrationExtensions/CreateDPRecordsRAFAPayoffRequest.cs" />
      <jump line="37" column="0" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero.dp/RA.Database.Migrator.RAHERO.DP/MigrationExtensions/CreateDPRecordsRAFAPayoffRequest.cs" />
      <jump line="30" column="0" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero.dp/RA.Database.Migrator.RAHERO.DP/InsertRecordsForRAFAPayoffStatementTemplate.cs" />
      <jump line="53" column="31" filename="$USER_HOME$/RiderProjects/ProjectEuler/ProjectEuler/Program.cs" />
      <jump line="52" column="8" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/Controllers/CustomerInquiryController.cs" />
      <jump line="27" column="53" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="43" column="55" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="44" column="3" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="19" column="16" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="118" column="34" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="5" column="0" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="107" column="48" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="8" column="22" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="10" column="22" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="22" column="13" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="30" column="22" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="29" column="8" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="47" column="8" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="66" column="8" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="86" column="8" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="106" column="8" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Services.FSP/APIDocumentation/CustomerInquiryExampleProvider.cs" />
      <jump line="257" column="0" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/SecuritizationEngine/Securitization.cs" />
      <jump line="118" column="0" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/SecuritizationEngine/Securitization.cs" />
      <jump line="180" column="12" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/SecuritizationEngine/Securitization.cs" />
      <jump line="290" column="84" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/SecuritizationEngine/Securitization.cs" />
      <jump line="35" column="0" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/RA.Domain.Dto.Dream/Models/SecuritizationModel.cs" />
      <jump line="0" column="0" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/RA.Domain.Dto.Dream/Models/SecuritizationModel.cs" />
      <jump line="32" column="0" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/RA.Domain.Dto.Dream/Models/SecuritizationModel.cs" />
      <jump line="34" column="0" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/RA.Domain.Dto.Dream/Models/SecuritizationModel.cs" />
      <jump line="610" column="1" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/SecuritizationEngine/Securitization.cs" />
      <jump line="417" column="18" filename="$USER_HOME$/Documents/s/OUPL/ra.api.operations2/RA.API.Operations2/Web.config" />
      <jump line="17" column="36" filename="$USER_HOME$/Documents/s/EPL/ra.database.fsp/RA.Database.Migrator.FSP/M20170519113726_CreateInitialLoanSchema.cs" />
      <jump line="16" column="8" filename="$USER_HOME$/Documents/s/EPL/ra.database.fsp/RA.Database.Migrator.FSP/AddOriginalCAPIFieldToRenovatePaceLoan.cs" />
      <jump line="15" column="30" filename="$USER_HOME$/Documents/s/EPL/ra.database.fsp/RA.Database.Migrator.FSP/AddOriginalCAPIFieldToRenovatePaceLoan.cs" />
      <jump line="10" column="28" filename="$USER_HOME$/Documents/s/EPL/ra.database.fsp/RA.Database.Migrator.FSP/AddOriginalCAPIFieldToRenovatePaceLoan.cs" />
      <jump line="12" column="55" filename="$USER_HOME$/Documents/s/EPL/ra.database.fsp/RA.Database.Migrator.FSP/AddOriginalCAPIFieldToRenovatePaceLoan.cs" />
      <jump line="20" column="0" filename="$USER_HOME$/Documents/s/EPL/ra.database.fsp/RA.Database.Migrator.FSP/AddOriginalCAPIFieldToRenovatePaceLoan.cs" />
      <jump line="6" column="17" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Domain.FSP.Dto/RenovatePaceLoanDto.cs" />
      <jump line="189" column="0" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Domain.FSP.Services/Loan/LoanService.cs" />
      <jump line="270" column="27" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Domain.FSP.Services/Loan/LoanService.cs" />
      <jump line="283" column="59" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Domain.FSP.Services/Loan/LoanService.cs" />
      <jump line="284" column="66" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Domain.FSP.Services/Loan/LoanService.cs" />
      <jump line="289" column="63" filename="$USER_HOME$/Documents/s/EPL/ra.cloud.fsp/RA.Domain.FSP.Services/Loan/LoanService.cs" />
      <jump line="6" column="13" filename="$APPLICATION_CONFIG_DIR$/consoles/db/4dd35349-d64c-43d5-972a-39bb450e0372/console_1.sql" />
      <jump line="12" column="64" filename="$APPLICATION_CONFIG_DIR$/consoles/db/4dd35349-d64c-43d5-972a-39bb450e0372/console_1.sql" />
      <jump line="0" column="0" filename="$APPLICATION_CONFIG_DIR$/consoles/db/4dd35349-d64c-43d5-972a-39bb450e0372/console_1.sql" />
      <jump line="16" column="28" filename="$APPLICATION_CONFIG_DIR$/consoles/db/4dd35349-d64c-43d5-972a-39bb450e0372/console_1.sql" />
      <jump line="11" column="7" filename="$APPLICATION_CONFIG_DIR$/consoles/db/4dd35349-d64c-43d5-972a-39bb450e0372/console_1.sql" />
      <jump line="3" column="29" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="1408" column="29" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="2796" column="30" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="509" column="26" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="2750" column="2" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="2800" column="21" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="2802" column="21" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="2814" column="2" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="8" column="0" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="2813" column="2" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="1809" column="0" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="2524" column="26" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="4" column="3" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="905" column="0" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="1810" column="0" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="2715" column="0" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="0" column="0" filename="$USER_HOME$/Documents/s/DB/ra.database.migrator.rahero/RA.Database.Migrator.RAHERO/Scripts/M20171128132330_AddEETypeConditionRecordsForCoolRoofsExcludingMOAndFL.sql" />
      <jump line="75" column="20" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/SecuritizationEngine/Securitization.cs" />
      <jump line="222" column="13" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/SecuritizationEngine/Securitization.cs" />
      <jump line="14" column="22" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Containers/CashFlows/ProjectedCashFlow.cs" />
      <jump line="17" column="22" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Containers/CashFlows/ProjectedCashFlow.cs" />
      <jump line="20" column="100" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Containers/CashFlows/ProjectedCashFlow.cs" />
      <jump line="31" column="110" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Containers/CashFlows/ProjectedCashFlow.cs" />
      <jump line="54" column="42" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Containers/CashFlows/ProjectedCashFlow.cs" />
      <jump line="78" column="12" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Containers/CashFlows/ProjectedCashFlow.cs" />
      <jump line="97" column="12" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Containers/CashFlows/ProjectedCashFlow.cs" />
      <jump line="119" column="52" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Containers/CashFlows/ProjectedCashFlow.cs" />
      <jump line="174" column="83" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/ProjectedCashFlows/ProjectedCashFlowLogic.cs" />
      <jump line="124" column="42" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/ProjectedCashFlows/ProjectedCashFlowLogic.cs" />
      <jump line="33" column="45" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Valuation/CashFlowGenerationInput.cs" />
      <jump line="69" column="45" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/Valuation/CashFlowGenerationInput.cs" />
      <jump line="115" column="21" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Common/Utilities/MathUtility.cs" />
      <jump line="102" column="0" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/ProductTypes/Pace/PaceAssessment.cs" />
      <jump line="19" column="0" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Core/BusinessLogic/ProductTypes/Pace/PaceAssessment.cs" />
      <jump line="20" column="12" filename="$USER_HOME$/Documents/s/dream/ra.services.dream/Dream.Common/Utilities/MathUtility.cs" />
      <jump line="38" column="16" filename="$USER_HOME$/Documents/s/OUPL/ra.api.operations2/RA.Domain.Services/Loans/ConfirmTerms/ConfirmTerms.json" />
      <jump line="2321" column="2" filename="$USER_HOME$/Documents/s/OUPL/ra.api.operations2/RA.Domain.Services/Loans/ConfirmTerms/ConfirmTerms.json" />
      <jump line="27" column="8" filename="$USER_HOME$/Documents/s/RR/ra.redistributables.audit/RA.Infrastructure.Audit/Storage/S3AuditStore.cs" />
      <jump line="31" column="56" filename="$USER_HOME$/Documents/s/RR/ra.redistributables.audit/RA.Infrastructure.Audit/Storage/S3AuditStore.cs" />
      <jump line="114" column="39" filename="$USER_HOME$/Documents/s/RR/ra.redistributables.audit/RA.Infrastructure.Audit/Storage/S3AuditStore.cs" />
    </jumps>
    <registers>
      <register name="a" type="4">
        <text>^lvlldj</text>
      </register>
      <register name="&quot;" type="4">
        <text>var</text>
      </register>
      <register name="-" type="4">
        <text>var</text>
      </register>
      <register name="/" type="4">
        <text>LoanStage</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgICJyZWZyZXNoX3Rva2VuIjogIjBlNjgzODI2NjM5YzRlYzRhZDA2Y2YxNWY1N2E1NmM2IiwK</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICAgICAgQ2xhaW1zUHJpbmNpcGFsID0gCg==</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICAgICAgCg==</text>
      </register>
      <register name="3" type="4">
        <text>new
                    {
                        RequestEndDate = entry.RequestEndDate,
                        StatusCode = entry.StatusCode,
                        ResponseHeaders = entry.ResponseHeaders,
                        ResponseLength = entry.ResponseLength,
                        Response = entry.Response,
                        CallDuration = entry.CallDuration,
                    }</text>
      </register>
      <register name="4" type="4">
        <text>, new
                    {
                        TrackingId = entry.TrackingId,
                        CallerIdentity = entry.CallerIdentity,
                        RequestStartDate = entry.RequestStartDate,
                        Verb = entry.Verb,
                        RequestUri = entry.RequestUri,
                        RequestHeaders = entry.RequestHeaders,
                        Request = entry.Request,
                        ClaimsPrincipal = entry.ClaimsPrincipal.SerializeRAClaims()
                    }</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICBvYmplY3QgCg==</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgIAo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgIAo=</text>
      </register>
      <register name=":" type="4">
        <text>w</text>
      </register>
    </registers>
    <search>
      <last-search>LoanStage</last-search>
      <last-offset />
      <last-pattern>LoanStage</last-pattern>
      <last-replace>entry</last-replace>
      <last-substitute>auditRecord</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry>arcode</entry>
        <entry>new</entry>
        <entry>Dbrs</entry>
        <entry>Logger</entry>
        <entry>Decimal</entry>
        <entry>original_capi</entry>
        <entry>GetRe</entry>
        <entry>_mapper</entry>
        <entry>INSERT</entry>
        <entry>Run</entry>
        <entry>fee</entry>
        <entry>PrepaymentInterest</entry>
        <entry>Prepay</entry>
        <entry>Prep</entry>
        <entry>Prepayment =</entry>
        <entry>Separate</entry>
        <entry>PMT</entry>
        <entry>Pmt</entry>
        <entry>Payment</entry>
        <entry>LoanStage</entry>
      </history-search>
      <history-cmd>
        <entry>s</entry>
        <entry>%s/propertyprofile/loggerapi/g</entry>
        <entry>%s/ra_//g</entry>
        <entry>2w</entry>
        <entry>%s/'/&quot;/g</entry>
        <entry>wqa</entry>
        <entry>wj</entry>
        <entry encoding="base64">JzwsJz5zL2F1ZGl0UmVjb3JkL2VudHJ5L2c=</entry>
        <entry>q</entry>
        <entry>we</entry>
        <entry>redo</entry>
        <entry>wk</entry>
        <entry>split</entry>
        <entry>W</entry>
        <entry>wa</entry>
        <entry encoding="base64">JzwsJz5RQQ==</entry>
        <entry encoding="base64">JzwsJz5xYQ==</entry>
        <entry>vsp</entry>
        <entry>qa</entry>
        <entry>w</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>